<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on ~simmsb</title><link>/tags/programming/</link><description>Recent content in programming on ~simmsb</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing a discord library using Polysemy</title><link>/writing-a-discord-library-using-polysemy/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>/writing-a-discord-library-using-polysemy/</guid><description>Recently I&amp;rsquo;ve rewritten my discord library to use polysemy instead of mtl/transformers, in this1 and some upcoming blog post I&amp;rsquo;ll be writing about the challenges I faced and solved2 while going about the conversion.
Logging The first effect that I converted from mtl to Polysemy was logging, originally I was using simple-log because I liked being able have areas of code run inside logging &amp;lsquo;scopes&amp;rsquo;, at the time co-log-polysemy was the only existing logging framework for polysemy and I was planning to use it, but instead I found di and decided to write a Polysemy effect for it.</description></item><item><title>t h e y - c o m b i n a t o r</title><link>/the-y-combinator/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><guid>/the-y-combinator/</guid><description>owo
(λ (f) ((λ (x) (f (x x))) (λ (x) (f (x x)))))</description></item><item><title>Writing our own event loops in python</title><link>/writing-our-own-event-loops-in-python/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><guid>/writing-our-own-event-loops-in-python/</guid><description>One of the good features of python is it&amp;rsquo;s native support for coroutines, generalised functions that can be paused and resumed, allowing objects to be passed between the coroutine and whoever is running them when at the time.
The most widely used place for Python&amp;rsquo;s coroutines currently is in asyncio frameworks, namely the standard library module: AsyncIO, Trio, and Curio. These use python coroutines to allow the user to write code that requires IO resources that may not be available at some point when their code runs, but will be in the future.</description></item></channel></rss>